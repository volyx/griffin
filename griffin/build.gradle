
plugins {
    id 'base'
    id 'java'
    id 'application'
    id "org.mikeneck.graalvm-native-image" version "0.3.0"
    id 'com.github.johnrengelman.shadow' version '5.2.0'
//    id 'checkstyle'
}

repositories {
    jcenter()
}

dependencies {
    compile project(":jygments")
    compile "info.picocli:picocli:4.2.0"
    compile "com.github.rjeschke:txtmark:0.13"
    compile "com.moandjiezana.toml:toml4j:0.4.0"
    compile "com.github.jknack:handlebars:4.1.2"
    compile "org.slf4j:slf4j-simple:1.7.12"
    compile "com.google.code.findbugs:jsr305:3.0.2"

    compileOnly("com.oracle.substratevm:svm:${graalVMVersion}")
    implementation("org.graalvm.sdk:graal-sdk:${graalVMVersion}")

//    compile 'org.graalvm.nativeimage:svm:19.3.1'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testCompile "junit:junit:4.10"

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

    annotationProcessor 'info.picocli:picocli-codegen:4.2.0'

}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.compilerArgs += ["-Aproject=${project.name}"]
}

mainClassName = 'com.pawandubey.griffin.Griffin'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}
application {
    mainClassName = mainClassName
}

task packageScaffold(type: Zip) {
    from "$projectDir/../scaffold"
    exclude "build.gradle"
//    into "$buildDir/toArchive"

    archiveFileName = "scaffold.zip"
    destinationDirectory = file("$projectDir/src/main/resources")
}


processResources.dependsOn packageScaffold

//checkstyle {
//    toolVersion = '8.30'
//}

import org.gradle.internal.os.OperatingSystem

String osName = OperatingSystem.current().getName();

nativeImage {
    setGraalVmHome(System.getProperty("java.home"))
    setMainClass(mainClassName)
    setExecutableName("$project.name-$osName")
//    setOutputDirecory("$buildDir/native-image/$osName")
    arguments(
            "--no-fallback",
            "--enable-all-security-services",
            "--report-unsupported-elements-at-runtime",
            "-H:EnableURLProtocols=http",
            "-H:+AllowVMInspection",
            "-H:+ReportExceptionStackTraces",
            "-Dfile.encoding=UTF-8"
    )
}


test {
    useJUnitPlatform()
}
